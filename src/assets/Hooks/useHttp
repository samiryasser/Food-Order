import { useCallback, useEffect, useState } from "react";

const sendHttpRequest = async (url, config) => {
  try {
    const response = await fetch(url, config);
    const data = await response.json();
    if (!response) {
      throw new Error(data.message || "Something went wrong!");
    }
    return data;
  } catch (error) {
    console.log(error || "Something went wrong!");
  }
};
const useHttp = (url, config, initialData) => {
  const [data, setData] = useState(initialData);
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState();
  const sendRequest = useCallback(
    async function (fdata) {
      try {
        setIsLoading(true);
        const resData = await sendHttpRequest(url, { ...config, body: fdata });
        setData(resData);
      } catch (error) {
        setError(error.message || "something went wrong");
      }
      setIsLoading(false);
    },
    [url, config]
  );
  const clearData = () => {
    setData(initialData);
  };
  const sendRequestGet = useCallback(
    async function () {
      try {
        setIsLoading(true);
        const resData = await sendHttpRequest(url, config);
        setData(resData);
      } catch (error) {
        setError(error.message || "something went wrong");
      }
      setIsLoading(false);
    },
    [url, config]
  );
  useEffect(() => {
    if ((config && (config.method === "GET" || !config.method)) || !config) {
      sendRequestGet();
    }
  }, [sendRequestGet, config]);
  return {
    data,
    isLoading,
    error,
    sendRequest,
    clearData,
  };
};
export default useHttp;
